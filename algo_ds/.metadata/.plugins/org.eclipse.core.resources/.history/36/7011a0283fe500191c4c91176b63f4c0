

#include<iostream>
using namespace std;
#include<iomanip>
#include<vector>
#include<list>
#include<iterator>

class edge
{
private:
	int v;
	int w;
public:
	edge(int v=0,int w=0)
{
		this->v=v;
		this->w=w;
}
	friend ostream& operator<<(ostream &out,edge &other)
	{
		cout<< other.v<< " : " << other.w ;
		return out;
	}
};
class graph
{
private:
	vector<list<edge> >	gr;
	int vertc_cnt;
	int edge_cnt;
public:
	graph(void)
{
		this->vertc_cnt=0;
		this->edge_cnt=0;
}
void acceptvalues()
	{
		cout<<"enter the vertices :  "<<endl;
		cin>>vertc_cnt;
		cout<<"enter the edges :   "<<endl;
		cin>>edge_cnt;

		for( int i=0;i<vertc_cnt;++i)
		{
			list<edge> empty_list;
			gr.push_back(empty_list);
		}

		for(int i=0; i<edge_cnt; ++i)
		{
			int from,to,weight;
			cout<<"enter the vertices: from - to -weight"<<endl;
			cin>>from>>to>>weight;

			edge ed1(to,weight);
			gr [from].push_back(ed1);

			edge ed2(from,weight);
			gr [to].push_back(ed1);

		}

	}
void displaygraph()
{
	cout<<"the vertices are:   "<<endl;
	cout<<"the edges are:     "<<endl;
	cout<<"the graph is:   "<<endl;

	list<edge>::iterator itr;
	for(int i=0;i<vertc_cnt;++i)
	{
			cout<<"["<< i <<"]"<< "->";
			for(itr=gr[i].begin(); itr!=gr[i].end(); ++itr)
				cout<<"|"<< *itr <<"|"<<"->";
			cout<<"null"<<endl;

	}
	cout<<endl;
}
};
int main(void)
{
	graph g;
	g.acceptvalues();
	g.displaygraph();
	return 0;
}



